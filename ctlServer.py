#!/usr/bin/python2
#
# Server to receive and control slaves
#
# @author Brian Hession
# @email bhession@gmu.edu
#

from __future__ import print_function
import socket, select, struct

mserver   = ('localhost', 5555)
ctlserver = ('localhost', 6666)

msock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
msock.setblocking(0)
msock.bind(mserver)
msock.listen(1)

ctlsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ctlsock.setblocking(0)
ctlsock.bind(ctlserver)
ctlsock.listen(1)

incoming = [msock, ctlsock]
outgoing = list()

# {sock : messageList}
messages = dict()

# {sock : [(ip, cpuname, freemem, osname, date), bytesToRead, bytesRead, dataRead]}
army     = dict()

# {sock : [bytesToRead, bytesRead, dataRead]}
commands = dict()

print('Master server listening on {}:{}'.format(*mserver))
print('Control server listening on {}:{}'.format(*ctlserver))
try:
    while len(incoming) > 0:
        readable, writable, exceptional = select.select(incoming, outgoing, incoming)
        for sock in readable:
            if sock is msock:
                conn, c_addr = msock.accept()
                conn.setblocking(0)
                incoming.append(conn)
                army[conn]   = [('%s:%s' % c_addr,'','','',''), 0x4C, 0, str()]
                messages[conn] = list()
            elif sock is ctlsock:
                conn, c_addr = ctlsock.accept()
                conn.setblocking(0)
                incoming.append(conn)
                commands[conn] = [0x70, 0, bytearray()]
                messages[conn] = list()
            elif sock in army:
                try:
                    data = sock.recv(army[sock][1] - army[sock][2])
                    if data:
                        army[sock][3] += data
                        army[sock][2]  = len(army[sock][3])
                        army[sock][1] -= len(army[sock][3])
                        if not army[sock][1]:
                            cpuname, freemem, osname, date = struct.unpack('! 32s 20s 12s 12s', army[sock][3])
                            army[sock] = [(army[sock][0][0], cpuname.strip('\x00'), freemem.strip('\x00'),
                                        osname.strip('\x00'), date.strip('\x00')),
                                    0x4C, 0, str()]
                            print('New slave ::', ' '.join(army[sock][0]))
                    else:
                        incoming.remove(sock)
                        del army[sock]
                        sock.close()
                except socket.error:
                    print('Lost slave', ' '.join(army[sock][0]))
                    incoming.remove(sock)
                    del army[sock]
                    sock.close()
            elif sock in commands:
                try:
                    data = sock.recv(commands[sock][0] - commands[sock][1])
                    if data:
                        commands[sock][2] += bytearray(data)
                        commands[sock][1]  = len(commands[sock][2])
                        commands[sock][0] -= len(commands[sock][2])
                        if not commands[sock][0]:
                            cmd = commands[sock][2]
                            opcode = int(struct.unpack('<I', cmd[:4])[0])
                            if opcode == 0:
                                messages[sock].append('\n'.join([' '.join(army[k][0]) for k in army]))
                                outgoing.append(sock)
                            else:
                                print('Sending opcode {:02x}h to army'.format(opcode))
                                for s in army:
                                    messages[s].append(cmd)
                                    outgoing.append(s)
                            commands[sock] = [0x70, 0, bytes()]
                    else:
                        incoming.remove(sock)
                        del commands[sock]
                        sock.close()
                except socket.error:
                    incoming.remove(sock)
                    del commands[sock]
                    sock.close()
            else:
                raise Exception('Unknown socket')
        for sock in writable:
            if len(messages[sock]) > 0:
                msg = messages[sock].pop(0)
                bytesSent = sock.send(msg)
                if bytesSent < len(msg):
                    messages[sock].insert(0, msg[bytesSent:])
            else:
                outgoing.remove(sock)
                if sock in commands:
                    incoming.remove(sock)
                    del commands[sock]
                    sock.close()
        for sock in exceptional:
            inputs.remove(sock)
            if sock in outgoing:
                outgoing.remove(sock)
            if sock in army:
                del army[sock]
            if sock in commands:
                del commands[sock]
            sock.close()
            del messages[sock]
finally:
    for sock in incoming:
        sock.close()
