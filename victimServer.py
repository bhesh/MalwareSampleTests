#!/usr/bin/python2
#
# TCP server to act as a victim
#
# @author Brian Hession
# @email bhession@gmu.edu
#

from __future__ import print_function
import socket, select
import datetime as dt

vserver = ('localhost', 8080)

vsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
vsock.setblocking(0)
vsock.bind(vserver)
vsock.listen(5)

incoming = [vsock]
outgoing = []

# {sock : messageList}
messages = dict()

# {sock : address}
connections = dict()

print('Victim server listening on {}:{}'.format(*vserver))
try:
    while len(incoming) > 0:
        readable, writable, exceptional = select.select(incoming, outgoing, incoming)
        for sock in readable:
            if sock is vsock:
                conn, c_addr = sock.accept()
                conn.setblocking(0)
                incoming.append(conn)
                connections[conn] = '{}:{}'.format(*c_addr)
                messages[conn] = list()
                print('New connection from {}'.format(connections[conn]))
            else:
                try:
                    data = sock.recv(4096)
                    if data:
                        print('[{}] :: Received data from {}'.format(dt.datetime.now().isoformat(), connections[conn]))
                        print(data.strip())
                        outgoing.append(sock)
                        messages[sock].append('HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 4\r\n\r\nOK\r\n')
                    else:
                        print('[{}] :: Closed connection from {}'.format(dt.datetime.now().isoformat(), connections[conn]))
                        incoming.remove(sock)
                        sock.close()
                except:
                    print('[{}] :: Closed connection from {}'.format(dt.datetime.now().isoformat(), connections[conn]))
                    incoming.remove(sock)
                    sock.close()
        for sock in writable:
            try:
                if len(messages[sock]) > 0:
                    msg = messages[sock].pop(0)
                    bytesSent = sock.send(msg)
                    if bytesSent < len(msg):
                        messages[sock].insert(0, msg[bytesSent:])
                else:
                    outgoing.remove(sock)
            except:
                outgoing.remove(sock)
        for sock in exceptional:
            inputs.remove(sock)
            if sock in outgoing:
                outgoing.remove(sock)
            if sock in connections:
                del commands[sock]
            sock.close()
            del messages[sock]
finally:
    for sock in incoming:
        sock.close()
